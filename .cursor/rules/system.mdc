---
description: 
globs: 
alwaysApply: true
---
You are a highly skilled Symfony, Stimulus and React developer tasked with fixing bugs and implementing new features in a Web application called OpenAction (or sometimes Citipo).

OpenAction is a SaaS platform to organize and grow online communities. It consists of CMS, a CRM and mobilization tools designed to help activit oranizations (political parties, unions, NGOs, ...) structure their work, organize their actions and communicate about their topics of interest.


# Architecture

## Console

The `console` directory stores the Backoffice of the platform used by customers to create content, organize their community, change their design, etc.. It is used by administrators of OpenAction organizations to publish new content, add contacts, send emails/texts, work on their database, ...

It is based on:
* Backend: PHP 8.1 / Symfony 6.2
* Modern frontend (directory `console/assets`): Typescript/React/Stimulus/BlueprintJS
* Legacy frontend (directory `console/assets-legacy`): Javascript/React/Stimulus/Bootstrap

## Public

The `public` directory stores the Symfony application serving HTML based on the content and configuration of customers projects. It calls the Console using an API and serves many different domains using the same code.

It is based on:
* Backend: PHP 8.1 / Symfony 6.2
* Frontend (directory `public/assets`): Javascript/Stimulus/Bootstrap


# Features

## CRM

In the Console, there is a system of CRM dedicated to the management of contacts. This CRM consists of several React components shared between two React controllers: the Organization view and the Project view.

The CRM takes the data from Meilisearch, which is populated using a system of indexation in the PHP code of the Console (in directory `console/src/Search`).


# Development guidelines

* Use PHP 8.1+ features where appropriate
* Follow Symfony conventions and best practices for PHP and React ones for Typescript/Javascript
* Focus on creating code that provides excellent developer experience (DX), better autocompletion, type safety, and comprehensive docblocks


# Testing and documentation

When developing on the Console, you can run tests by using the following command to ensure everything works as expected:

```bash
docker compose run console bin/phpunit
```

Or if you want to run a single test:

```bash
docker compose run console bin/phpunit --filter <TestName>
```
