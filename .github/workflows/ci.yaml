name: CI

on: push

jobs:
    #
    # Console
    #

    # PHP coding style
    console-php-cs:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@master

            - uses: shivammathur/setup-php@v2
              with:
                  php-version: '8.1'
                  coverage: none

            - name: Install php-cs-fixer
              run: cd console && wget https://github.com/FriendsOfPHP/PHP-CS-Fixer/releases/download/v3.12.0/php-cs-fixer.phar -q

            - name: Check coding style
              run: cd console && php php-cs-fixer.phar fix --dry-run --diff

    # Composer normalize
    console-composer-normalize:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@master

            - uses: shivammathur/setup-php@v2
              with:
                  php-version: '8.1'
                  coverage: none

            - name: Install composer-normalize
              run: cd console && wget https://github.com/ergebnis/composer-normalize/releases/download/2.24.1/composer-normalize.phar -q

            - name: Check Composer files
              run: cd console && php composer-normalize.phar --dry-run

    # Translations
    console-translations:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@master

            - uses: shivammathur/setup-php@v2
              with:
                  php-version: '8.1'
                  coverage: none

            - name: Install translations-checker
              run: wget https://github.com/tgalopin/symfony-translations-checker/releases/download/1.0.0/checker.phar

            - name: Check translations
              run: php checker.phar check console/translations

    # JS coding style
    console-js-legacy-prettier:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@master

            - uses: actions/setup-node@v2
              with:
                  node-version: '22'

            - name: Install legacy JavaScript dependencies
              run: cd console/assets/legacy && yarn install

            - name: Check legacy coding style
              run: cd console/assets/legacy && yarn prettier --check js-stimulus ts-react --config .prettierrc.json

            - name: Install projects JavaScript dependencies
              run: cd console/assets/projects && yarn install

            - name: Check projects coding style
              run: cd console/assets/projects && yarn prettier --check . --config .prettierrc.json

    # JS tests
    console-js-legacy-tests:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@master

            - uses: actions/setup-node@v2
              with:
                  node-version: '22'

            - name: Install JavaScript dependencies
              run: cd console/assets/legacy && yarn install

            - name: Jest
              run: cd console/assets/legacy && yarn test

    # JS build
    console-js-legacy-build:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@master

            - uses: actions/setup-node@v2
              with:
                  node-version: '22'

            - name: Install JavaScript dependencies
              run: cd console/assets/legacy && yarn install

            - name: Build JavaScript
              run: cd console/assets/legacy && yarn build

            - name: Install projects JavaScript dependencies
              run: cd console/assets/projects && yarn install

            - name: Build projects JavaScript
              run: cd console/assets/projects && yarn build

    # PHP tests
    console-php-tests:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@master

            - uses: azure/docker-login@v1
              with:
                  login-server: ghcr.io
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - uses: shivammathur/setup-php@v2
              with:
                  php-version: '8.1'
                  coverage: none
                  extensions: redis

            - name: Get Composer cache directory
              id: composer-cache
              run: echo "::set-output name=dir::$(composer config cache-files-dir)"

            - name: Mount PHP dependencies cache
              uses: actions/cache@v4
              with:
                  path: ${{ steps.composer-cache.outputs.dir }}
                  key: ${{ runner.os }}-composer-${{ hashFiles('console/composer.lock') }}
                  restore-keys: ${{ runner.os }}-composer-

            - name: Refresh PHP dependencies cache
              run: cd console && composer install --prefer-dist --no-interaction --no-ansi --no-progress --no-scripts

            - name: Start services
              run: docker compose up -d

            - name: Install PHP dependencies
              run: docker compose exec -T console composer install --prefer-dist --no-interaction --no-ansi --no-progress

            - name: Setup assets fixtures
              run: cd console && cp -R tests/Fixtures/assets/* public/

            - name: Prepare database
              run: |
                  docker compose exec -T console bin/console doctrine:migrations:migrate -n -e test
                  docker compose exec -T console bin/console doctrine:fixtures:load -n --group test -e test

            - name: Prepare Meilisearch
              run: docker compose exec -T console bin/console app:search:index-crm

            - name: 'PHPUnit (group: transactions enabled)'
              run: docker compose exec -T console bin/phpunit --exclude-group without-transaction

            - name: 'PHPUnit (group: transactions disabled)'
              run: docker compose exec -T console bin/phpunit --group without-transaction

    # Release
    console-release:
        runs-on: ubuntu-latest
        needs:
            - console-php-cs
            - console-composer-normalize
            - console-translations
            - console-js-legacy-prettier
            - console-js-legacy-tests
            - console-js-legacy-build
            - console-php-tests
        if: github.ref == 'refs/heads/main'
        steps:
            - uses: actions/checkout@master

            - uses: actions/setup-node@v2
              with:
                  node-version: '22'

            - uses: azure/docker-login@v1
              with:
                  login-server: ghcr.io
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Install legacy JavaScript dependencies
              run: cd console/assets/legacy && yarn install

            - name: Build legacy JavaScript
              run: cd console/assets/legacy && yarn build

            - name: Install modern JavaScript dependencies
              run: cd console/assets/modern && yarn install

            - name: Build modern JavaScript
              run: cd console/assets/modern && yarn build

            - name: Install projects JavaScript dependencies
              run: cd console/assets/projects && yarn install

            - name: Build projects JavaScript
              run: cd console/assets/projects && yarn build

            - name: Build and publish console production image
              uses: elgohr/Publish-Docker-Github-Action@master
              with:
                  name: ${{ github.repository }}/console
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}
                  registry: ghcr.io
                  workdir: console
                  dockerfile: Dockerfile

    #
    # Public
    #

    # PHP coding style
    public-php-cs:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@master

            - uses: shivammathur/setup-php@v2
              with:
                  php-version: '8.1'
                  coverage: none

            - name: Install php-cs-fixer
              run: cd public && wget https://github.com/FriendsOfPHP/PHP-CS-Fixer/releases/download/v3.4.0/php-cs-fixer.phar -q

            - name: Check coding style
              run: cd public && php php-cs-fixer.phar fix --dry-run --diff

    # Composer normalize
    public-composer-normalize:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@master

            - uses: shivammathur/setup-php@v2
              with:
                  php-version: '8.1'
                  coverage: none

            - name: Install composer-normalize
              run: cd public && wget https://github.com/ergebnis/composer-normalize/releases/download/2.24.1/composer-normalize.phar -q

            - name: Check Composer files
              run: cd public && php composer-normalize.phar --dry-run

    # Translations
    public-translations:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@master

            - uses: shivammathur/setup-php@v2
              with:
                  php-version: '8.1'
                  coverage: none

            - name: Install translations-checker
              run: wget https://github.com/tgalopin/symfony-translations-checker/releases/download/1.0.0/checker.phar

            - name: Check translations
              run: php checker.phar check public/translations

    # Tests
    public-tests:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@master

            - uses: azure/docker-login@v1
              with:
                  login-server: ghcr.io
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - uses: shivammathur/setup-php@v2
              with:
                  php-version: '8.1'
                  coverage: none
                  extensions: redis

            - name: Get Composer cache directory
              id: composer-cache
              run: echo "::set-output name=dir::$(composer config cache-files-dir)"

            - name: Mount PHP dependencies cache
              uses: actions/cache@v4
              with:
                  path: ${{ steps.composer-cache.outputs.dir }}
                  key: ${{ runner.os }}-composer-${{ hashFiles('console/composer.lock') }}
                  restore-keys: ${{ runner.os }}-composer-

            - name: Refresh PHP dependencies cache
              run: |
                  cd console && composer install --prefer-dist --no-interaction --no-ansi --no-progress --no-scripts
                  cd ../public && composer install --prefer-dist --no-interaction --no-ansi --no-progress --no-scripts

            - name: Start services
              run: docker compose up -d

            - name: Install PHP dependencies
              run: |
                  docker compose exec -T console composer install --prefer-dist --no-interaction --no-ansi --no-progress
                  docker compose exec -T public composer install --prefer-dist --no-interaction --no-ansi --no-progress

            - name: Setup assets fixtures
              run: |
                  cp -R console/tests/Fixtures/assets/* console/public/
                  cp -R public/tests/Fixtures/assets public/public/build

            - name: Prepare database
              run: |
                  docker compose exec -T console bin/console doctrine:migrations:migrate -n
                  docker compose exec -T console bin/console doctrine:fixtures:load -n --group test

            - name: Prepare domains
              run: docker compose exec -T console bin/console app:proxy:refresh-domains-cache -n

            - name: PHPUnit
              run: docker compose exec -T public bin/phpunit

    # Release
    public-release:
        runs-on: ubuntu-latest
        needs:
            - public-php-cs
            - public-composer-normalize
            - public-translations
            - public-tests
        if: github.ref == 'refs/heads/main'
        steps:
            - uses: actions/checkout@master

            - uses: shivammathur/setup-php@v2
              with:
                  php-version: '8.1'
                  coverage: none
                  extensions: redis

            - uses: azure/docker-login@v1
              with:
                  login-server: ghcr.io
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Get Composer cache directory
              id: composer-cache
              run: echo "::set-output name=dir::$(composer config cache-files-dir)"

            - name: Mount PHP dependencies cache
              uses: actions/cache@v4
              with:
                  path: ${{ steps.composer-cache.outputs.dir }}
                  key: ${{ runner.os }}-composer-${{ hashFiles('console/composer.lock') }}
                  restore-keys: ${{ runner.os }}-composer-

            - name: Refresh PHP dependencies cache
              run: cd public && composer install --prefer-dist --no-interaction --no-ansi --no-progress --no-scripts

            - name: Install JavaScript dependencies
              run: cd public && yarn install

            - name: Build JavaScript
              run: cd public && yarn build

            - name: Build and publish public production image
              uses: elgohr/Publish-Docker-Github-Action@master
              with:
                  name: ${{ github.repository }}/public
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}
                  registry: ghcr.io
                  workdir: public
                  dockerfile: Dockerfile
